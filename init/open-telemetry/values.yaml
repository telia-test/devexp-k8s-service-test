---
mode: daemonset
replicaCount: 1
fullnameOverride: "otel-collector-logs"

image:
  repository: common-dockerhub-remote.jfrog.teliacompany.io/otel/opentelemetry-collector-contrib

imagePullSecrets:
  - name: artifactory-secret

securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  seccompProfile:
    type: RuntimeDefault

presets:
  logsCollection:
    enabled: true
  kubeletMetrics:
    enabled: false
  hostMetrics:
    enabled: false

ports:
  metrics:
    enabled: true
    containerPort: 8888
    servicePort: 8888
    protocol: TCP

resources:
  requests:
    memory: "256Mi"
    cpu: "100m"
  limits:
    memory: "512Mi"
    cpu: "200m"
# Base collector configuration.
# Supports templating. To escape existing instances of {{ }}, use {{` <original content> `}}.
# For example, {{ REDACTED_EMAIL }} becomes {{` {{ REDACTED_EMAIL }} `}}.
config:
  extensions:
    health_check:
      endpoint: ${env:MY_POD_IP}:13133
    oauth2client:
      client_id: Hid100010187 # Replace with actual client id from your onboarding zipfile or contact grafana-daas@teliacompany.com
      client_secret: 5zxu4YwXS9BLVhInSZ4CQpDIddgzHFr7 # Replace with actual client secret from your onboarding zipfile or contact grafana-daas@teliacompany.com
      token_url: https://grprodsekeycloak.oaas.teliacompany.net/realms/OpenTelemetryGateway/protocol/openid-connect/token # Replace with actual token url from your onboarding zipfile or contact grafana-daas@teliacompany.com
      timeout: 2s
  receivers:
    otlp:
      protocols:
        grpc:
          endpoint: localhost:4317
        http:
          endpoint: localhost:4318
    filelog/nginx:
      include:
        - /var/log/pods/*/nginx/*.log
      include_file_path: true
      include_file_name: false
      operators:
        - type: container
          id: container-parser
          max_log_size: 102400
          include: ["stdout", "stderr"]       
      
        - type: json_parser
          id: json-parser
          parse_from: body

      retry_on_failure:
        enabled: true
    filelog/nginxi:
      include:
        - /var/log/pods/*/controller/*.log
      include_file_path: true
      include_file_name: false
      operators:
        - type: container
          id: container-parser
          max_log_size: 102400
          include: ["stdout", "stderr"]       
      
        - type: json_parser
          id: json-parser
          parse_from: body

      retry_on_failure:
        enabled: true  
    prometheus:
      config:
        scrape_configs:
          - job_name: 'nginx-ingress-controller'
            metrics_path: '/metrics'
            static_configs:
              - targets: ['nginx-ingress-nginx-ingress-controller-metrics.ingress-nginx.svc.cluster.local:9913']
          - job_name: 'kubernetes-pods'
            honor_labels: true
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
                action: drop
                regex: true
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
                action: replace
                regex: (https?)
                target_label: __scheme__
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
                action: replace
                regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
                replacement: '[$2]:$1'
                target_label: __address__
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
                action: replace
                regex: (\d+);((([0-9]+?)(\.|$)){4})
                replacement: $2:$1
                target_label: __address__
              - action: labelmap
                regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
                replacement: __param_$1
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: namespace
              - source_labels: [__meta_kubernetes_pod_name]
                action: replace
                target_label: pod
              - source_labels: [__meta_kubernetes_pod_phase]
                regex: Pending|Succeeded|Failed|Completed
                action: drop
          - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            job_name: integrations/kubernetes/cadvisor
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - replacement: kubernetes.default.svc.cluster.local:443
                target_label: __address__
              - regex: (.+)
                replacement: /api/v1/nodes/$${1}/proxy/metrics/cadvisor
                source_labels:
                  - __meta_kubernetes_node_name
                target_label: __metrics_path__
            metric_relabel_configs:
              - source_labels: [__name__]
                action: keep
                regex: 'container_cpu_cfs_periods_total|container_cpu_cfs_throttled_periods_total|container_cpu_usage_seconds_total|container_fs_reads_bytes_total|container_fs_reads_total|container_fs_writes_bytes_total|container_fs_writes_total|container_memory_cache|container_memory_rss|container_memory_swap|container_memory_working_set_bytes|container_network_receive_bytes_total|container_network_receive_packets_dropped_total|container_network_receive_packets_total|container_network_transmit_bytes_total|container_network_transmit_packets_dropped_total|container_network_transmit_packets_total|machine_memory_bytes'
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: false
              server_name: kubernetes

          # Conifguration for kubelet metrics
          - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            job_name: integrations/kubernetes/kubelet
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - replacement: kubernetes.default.svc.cluster.local:443
                target_label: __address__
              - regex: (.+)
                replacement: /api/v1/nodes/$${1}/proxy/metrics
                source_labels:
                  - __meta_kubernetes_node_name
                target_label: __metrics_path__
            metric_relabel_configs:
              - source_labels: [__name__]
                action: keep
                regex: 'container_cpu_usage_seconds_total|kubelet_certificate_manager_client_expiration_renew_errors|kubelet_certificate_manager_client_ttl_seconds|kubelet_certificate_manager_server_ttl_seconds|kubelet_cgroup_manager_duration_seconds_bucket|kubelet_cgroup_manager_duration_seconds_count|kubelet_node_config_error|kubelet_node_name|kubelet_pleg_relist_duration_seconds_bucket|kubelet_pleg_relist_duration_seconds_count|kubelet_pleg_relist_interval_seconds_bucket|kubelet_pod_start_duration_seconds_bucket|kubelet_pod_start_duration_seconds_count|kubelet_pod_worker_duration_seconds_bucket|kubelet_pod_worker_duration_seconds_count|kubelet_running_container_count|kubelet_running_containers|kubelet_running_pod_count|kubelet_running_pods|kubelet_runtime_operations_errors_total|kubelet_runtime_operations_total|kubelet_server_expiration_renew_errors|kubelet_volume_stats_available_bytes|kubelet_volume_stats_capacity_bytes|kubelet_volume_stats_inodes|kubelet_volume_stats_inodes_used|kubernetes_build_info|namespace_workload_pod|rest_client_requests_total|storage_operation_duration_seconds_count|storage_operation_errors_total|volume_manager_total_volumes'
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: false
              server_name: kubernetes

          # Configuration for kube-state-metrics
          - job_name: integrations/kubernetes/kube-state-metrics
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - action: keep
                regex: kube-state-metrics
                source_labels:
                  - __meta_kubernetes_pod_label_app_kubernetes_io_name
            metric_relabel_configs:
              - source_labels: [__name__]
                action: keep
                regex: 'kube_daemonset.*|kube_deployment_metadata_generation|kube_deployment_spec_replicas|kube_deployment_status_observed_generation|kube_deployment_status_replicas_available|kube_deployment_status_replicas_updated|kube_horizontalpodautoscaler_spec_max_replicas|kube_horizontalpodautoscaler_spec_min_replicas|kube_horizontalpodautoscaler_status_current_replicas|kube_horizontalpodautoscaler_status_desired_replicas|kube_job.*|kube_namespace_status_phase|kube_node.*|kube_persistentvolumeclaim_resource_requests_storage_bytes|kube_pod_container_info|kube_pod_container_resource_limits|kube_pod_container_resource_requests|kube_pod_container_status_last_terminated_reason|kube_pod_container_status_restarts_total|kube_pod_container_status_waiting_reason|kube_pod_info|kube_pod_owner|kube_pod_start_time|kube_pod_status_phase|kube_pod_status_reason|kube_replicaset.*|kube_resourcequota|kube_statefulset.*'

          # Configuration for node-exporter
          - job_name: integrations/node_exporter
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - action: keep
                regex: prometheus-node-exporter.*
                source_labels:
                  - __meta_kubernetes_pod_label_app_kubernetes_io_name
              - action: replace
                source_labels:
                  - __meta_kubernetes_pod_node_name
                target_label: instance
              - action: replace
                source_labels:
                  - __meta_kubernetes_namespace
                target_label: namespace
            metric_relabel_configs:
              - source_labels: [__name__]
                action: keep
                regex: 'node_cpu.*|node_exporter_build_info|node_filesystem.*|node_memory.*|process_cpu_seconds_total|process_resident_memory_bytes'
  processors:
    batch:
      send_batch_size: 500
      timeout: 10s
    memory_limiter:
      check_interval: 1s
      limit_mib: 10000
      spike_limit_mib: 5000
    k8sattributes:
      passthrough: false
      extract:
        metadata:
         - k8s.namespace.name
         - k8s.deployment.name
         - k8s.statefulset.name
         - k8s.daemonset.name
         - k8s.cronjob.name
         - k8s.job.name
         - k8s.node.name
         - k8s.pod.name
         - k8s.pod.uid
      pod_association:
      - sources:
        - from: resource_attribute
          name: k8s.pod.ip
      - sources:
        - from: resource_attribute
          name: k8s.pod.uid
      - sources:
        - from: connection
    resource/nginx:
      attributes:
        - action: insert
          key: loki.resource.labels
          value: k8s.namespace.name, k8s.deployment.name, k8s.statefulset.name, k8s.daemonset.name, k8s.cronjob.name, k8s.job.name, k8s.node.name, k8s.pod.name, nginx_status, nginx_method, nginx_logtag, service_name
    resource/nginxi:
      attributes:
        - action: insert
          key: loki.resource.labels
          value: k8s.namespace.name, k8s.deployment.name, k8s.statefulset.name, k8s.daemonset.name, k8s.cronjob.name, k8s.job.name, k8s.node.name, k8s.pod.name, service_name
    transform/nginx:
      log_statements:
        - context: log
          statements:
            - set(resource.attributes["nginx_status"], log.attributes["status"])
            - set(resource.attributes["nginx_method"], log.attributes["method"]) 
            - set(resource.attributes["nginx_logtag"], log.attributes["logtag"])   
            - set(resource.attributes["service_name"], "nginx")    
    transform/nginxi:
        log_statements:
          - context: log
            statements:
              - set(resource.attributes["service_name"], "nginx-ingress") 
  exporters:
    otlp/logs:
      endpoint: "grprodseotellogs.oaas.teliacompany.net:4317" # Replace with actual endpoint from your onboarding zipfile or contact grafana-daas@teliacompany.com
      auth:
        authenticator: oauth2client
      tls:
        insecure: false
        insecure_skip_verify: true
      sending_queue:
        enabled: true
        queue_size: 2000
        num_consumers: 2
      retry_on_failure:
        enabled: true
        initial_interval: 10s
        randomization_factor: 0.7
        multiplier: 1.3
        max_interval: 60s
        max_elapsed_time: 10m
    otlp/metrics:
      endpoint: "grprodseotelmetrics.oaas.teliacompany.net:4317" # Replace with actual endpoint from your onboarding zipfile or contact grafana-daas@teliacompany.com
      auth:
        authenticator: oauth2client
      tls:
        insecure: false
        insecure_skip_verify: true
      sending_queue:
        enabled: true
        queue_size: 2000
        num_consumers: 2
      retry_on_failure:
        enabled: true
        initial_interval: 10s
        randomization_factor: 0.7
        multiplier: 1.3
        max_interval: 60s
        max_elapsed_time: 10m
    debug:
      verbosity: detailed
  service:
    telemetry:
      logs:
        level: debug
      metrics:
        address: ${env:MY_POD_IP}:8888
    extensions:
      - health_check
      - oauth2client
    pipelines:
      logs/nginx:
        processors:
          - memory_limiter
          - batch
          - transform/nginx
          - k8sattributes
          - resource/nginx
        receivers:
          - filelog/nginx
        exporters:
          - debug
          - otlp/logs
      logs/nginxi:
        processors:
          - memory_limiter
          - batch
          - transform/nginxi
          - k8sattributes
          - resource/nginxi

        receivers:
          - filelog/nginxi
        exporters:
          - debug
          - otlp/logs    
      metrics:
        receivers:
          - prometheus
        processors:
          - memory_limiter
          - k8sattributes
          - batch
        exporters:
          - otlp/metrics
clusterRole:
  create: true
  name: "otel-collector-logs"
  clusterRoleBinding:
    name: "otel-collector-logs"
  rules:
  - apiGroups:
      - ''
    resources:
      - 'events'
      - 'namespaces'
      - 'namespaces/status'
      - 'nodes'
      - 'nodes/proxy'
      - 'nodes/spec'
      - 'pods'
      - 'pods/log'
      - 'pods/status'
      - 'replicationcontrollers'
      - 'replicationcontrollers/status'
      - 'resourcequotas'
      - 'services'
      - 'configmaps'
      - 'endpoints'
    verbs:
      - 'get'
      - 'list'
      - 'watch'
  - apiGroups:
      - 'apps'
    resources:
      - 'daemonsets'
      - 'deployments'
      - 'replicasets'
      - 'statefulsets'
    verbs:
      - 'get'
      - 'list'
      - 'watch'
  - apiGroups:
      - 'extensions'
    resources:
      - 'daemonsets'
      - 'deployments'
      - 'replicasets'
    verbs:
      - 'get'
      - 'list'
      - 'watch'
  - apiGroups:
      - 'batch'
    resources:
      - 'jobs'
      - 'cronjobs'
    verbs:
      - 'get'
      - 'list'
      - 'watch'
  - apiGroups:
      - 'autoscaling'
    resources:
      - 'horizontalpodautoscalers'
    verbs:
      - 'get'
      - 'list'
      - 'watch'